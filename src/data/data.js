var data=[
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/6",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/6/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/6/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/6/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/6",
        "id": 324598544,
        "node_id": "MDU6SXNzdWUzMjQ1OTg1NDQ=",
        "number": 6,
        "title": "浏览器表单兼容处理",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-19T03:59:42Z",
        "updated_at": "2018-05-24T06:21:27Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "> 在做表单中会遇到各种浏览器，和各种意想不到的问题，在这里做一个小的总结\r\n\r\n1. 表单自动填充背景色\r\n![image.png](http://upload-images.jianshu.io/upload_images/4450341-7af5c68e00dd0e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n如果点击了保存用户名，浏览器是会自动填充表单的，也会填充默认的背景色通过添加样式可以解决这样的问题\r\n```css\r\ninput:-webkit-autofill {\r\n\t-webkit-box-shadow: 0 0 0 1000px white inset;\r\n\tbox-shadow: 0 0 0 50px #fff inset;\r\n}\r\n```\r\n效果如下：\r\n![image.png](http://upload-images.jianshu.io/upload_images/4450341-0398e3197c98f222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n2. input按钮样式问题\r\n在ipad中input的type为button或submit的时候按钮会被渲染成模样的样式\r\n![image.png](http://upload-images.jianshu.io/upload_images/4450341-c8bf917e88ff4fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n解决办法\r\n```css\r\ninput[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"] {\r\n-webkit-appearance: none;\r\n}\r\ntextarea {  -webkit-appearance: none;}   \r\n```\r\n圆角的处理\r\n```css\r\n.button{ border-radius: 0; } \r\n```\r\n -webkit-appearance: none;这句话的意思就是去除iOS的默认样式\r\n\r\n3. 还有用户名和密码保存的问题\r\n关于浏览器自动填充表单的问题我都记录在这里可以自己查看http://www.jianshu.com/p/0f4a2ab3388c 这里主要说的是但用户名和密码之间如果有其他的input框会导致浏览器将用户名记错的问题\r\n如下面这样\r\n![image.png](http://upload-images.jianshu.io/upload_images/4450341-06b8345d9a4be3be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n浏览起将用户名记录成了短信验证码\r\n解决办法，将短信验证码发在密码框下面，但是产品那边是不会通过的，只能是调整样式，页面的效果不变，只改样式和布局\r\n\r\n4. 在Safari中有两个问题比较啃爹了\r\n第一个就是在input框中出现了通讯录头像的问题\r\n![image.png](http://upload-images.jianshu.io/upload_images/4450341-3cd8250a72d3eac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n出现在手机号和用户名这些地方是可以理解的，但他还会出现在验证码中，现在只能通过其他的元素覆盖解决\r\n```css\r\ninput::-webkit-contacts-auto-fill-button {\r\n  visibility: hidden;\r\n  display: none !important;\r\n  pointer-events: none;\r\n  position: absolute;\r\n  right: 0;\r\n}\r\n```\r\n第二个，也是没有办法解决的一个问题\r\n\r\n5. 在ipad中的问题\r\n第一点就是表单填充问题，如果用submit表单提交会导致提交后表单的用户名和密码会被自动填充的用户名覆盖，\r\n解决办法，就使用其他按钮代替submit，点击触发submit提交\r\n第二点是select()事件，在ipad中如果给input框添加focusin事件并且在里面添加了select()事件当失去光标的时候input 框就会被赋值两次\r\n\r\n```css\r\ninput:-webkit-autofill {\r\n    -webkit-box-shadow: 0 0 0 1000px white inset;\r\n    box-shadow: 0 0 0 1000px white inset;\r\n  }\r\n  input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\r\n    color:    #999;\r\n    line-height:14px;\r\n  }\r\n  input:-moz-placeholder, textarea:-moz-placeholder {\r\n    color:    #999;\r\n    line-height:14px;\r\n  }\r\n  input::-moz-placeholder, textarea::-moz-placeholder {\r\n    color:    #999;\r\n    line-height:14px;\r\n  }\r\n  input:-ms-input-placeholder, textarea:-ms-input-placeholder {\r\n    color:#999!important;\r\n    line-height:12px!important;\r\n  }\r\n  input::-webkit-contacts-auto-fill-button {\r\n    visibility: hidden;\r\n    display: none !important;\r\n    pointer-events: none;\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n  input[type=\"text\"],input[type=\"password\"] {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n  }\r\n  /*css去掉iPhone、iPad默认按钮样式*/\r\n  input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"] {\r\n    -webkit-appearance: none;\r\n\r\n  }\r\n  textarea {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n  }\r\n```"
    },
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/5",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/5/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/5/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/5/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/5",
        "id": 324598452,
        "node_id": "MDU6SXNzdWUzMjQ1OTg0NTI=",
        "number": 5,
        "title": "浏览器自动填充表单问题",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-05-19T03:57:55Z",
        "updated_at": "2018-05-31T03:28:10Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "首先理解浏览器保存密码和自动填充是两个机制，记住密码机制需要遵循[同源策略](http://baike.baidu.com/link?url=1UygF57OpBrK733OtVWZhrX7H-i9PmWdoLOnl4BkNdatA3OqOB4VHwLTxDshFkUz3mnhmTvRacF7YHjCT8gEeg4ZXaLacjW1ri6VFm1yhfUUuTyVbyp0NV9NzxAQ4FdL)\r\n\r\n##### 1.测试浏览器（mac）\r\n\r\n| 浏览器 | 版本 |\r\n| - | :-: | \r\n| google | 56.0.2924.87  (64-bit) |\r\n| firefox | 51.0.1 (64 位) |\r\n| safari | 10.0 (12602.1.50.0.10) |\r\n| ie(win) | 7-8 |\r\n\r\n##### 2.首先要分析浏览器是如何记住这个表单的，和唯一性？\r\n     经过查资料实验得到的几个关键值\r\n     1. 为了遵循同源策略，需要域名：lichenglong.pw\r\n     2. 需要一个<form>标签\r\n     3. 需要id或name为username的用户名<input>表单项\r\n     4. 需要id或name为password的密码<input>表单项\r\n\r\n例如：\r\n\r\n```html\r\n<form id=\"register5\">\r\n      <div class=\"form-group\">\r\n           <label>user name</label>\r\n           <input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"Enter text\">\r\n           <div class=\"tipinfo\"></div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n           <label>password</label>\r\n           <input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Enter text\">\r\n           <div class=\"tipinfo\"></div>\r\n       </div>\r\n       <button type=\"submit\" class=\"btn btn-default\">Submit Button</button>\r\n</form>\r\n```\r\n\r\n各个浏览器提示保存密码截图\r\n1.google\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-5df21d026404e17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n2.firefox\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-ff7525ecb9e78db3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n3.safari\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-8f93151cccbf1d67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n4.ie\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-7d174e15f948b206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n##### 3.各浏览器的差异\r\n\r\n1. Safari浏览器\r\n只有Safari默认是关闭这个机制的。如果开启后，效果和chrome一样，非常好用！[Safari不能自动填充表单](https://support.apple.com/kb/PH19270?viewlocale=zh_CN&locale=zh_CN)\r\n2. Opera浏览器\r\nOpera好像很安全，记住密码后，浏览器并不会自动填充密码，而是要用户自己点击地址栏左边的钥匙图标，才会开始填充并登录。\r\n3. IE8/9浏览器\r\nIE8/9及部分这个内核的浏览器（比如遨游的IE模式）很聪明，将每个登录表单绑定到所在的页面上（下面简称这个页面为绑定页面），由于绑定页面地址是唯一的，同域内其他页面就无法通过生成一个一模一样的表单来获取密码了。\r\n如果就这样还是不安全:P，因为XSS(获取浏览器记住的明文密码)可以动态iframe进这个绑定页面，然后注入JS进行任意DOM操作，同样非常容易获取到密码表单项的值，IE估计是考虑到了这个，通过iframe调用绑定页面也无效。而且IE的机制还远没这样简单，即使在绑定页面内我也没成功得到密码，因为IE默认并不填充密码，只有输入正确用户名后，并触发类似onblur事件，这个密码表单项才会填充进对应用户名的密码。这个过程我本想通过DOM来模拟进行的，但是没有成功。感兴趣的同学可以试试。\r\n4. 其他浏览器\r\n其他浏览器（除了搜狗浏览器）都和Chrome差不多了，大多是因为webkit内核。\r\n5. IE8/IE9无法自动完成表单及记住密码的解决方法\r\nie浏览器比较特殊点，有时候我们使用某些优化软件对系统进行优化以后，可能会出IE浏览器即便开启了自动完成功能也无法记住账号和密码的问题您也可以先检查IE浏览器的 Internet 选项里面是否启用了该功能，依次打开Internet 选项 —— 切换至“内容”选项卡 —— 自动完成设置，看是否勾选了“表单上的用户名和密码”。 出现这种情况是因为IE浏览器的相应配置被禁用了，我们只要执行下面操作即可恢复。 \r\n1、按下 Win + R 键打开运行，在输入框中输入 gpedit.msc，单击确认打开本地组策略编辑器\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-3a78c12beaec76e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n2、依次展开用户配置 → 管理模板 → Windows 组件 → Internet Explorer\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-a4dd52cb968eca23.png)\r\n\r\n3、在右侧列表中找到“禁用表单的自动完成功能”选项，双击对该选项进行编辑，设置为已禁用，在单击确认\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-634ddc804a024849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-54b77e039ce564d3.png)\r\n\r\n4、再找到“表单上的用户名和密码启用自动完成”选项，双击对该选项进行编辑，设置为已启用，在单击确认\r\n\r\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/4450341-91dcc64ec9a4d92e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n设置完成以后，可以关闭本地组策略编辑器，然后再重启IE即可。"
    },
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/4",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/4/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/4/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/4/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/4",
        "id": 324598423,
        "node_id": "MDU6SXNzdWUzMjQ1OTg0MjM=",
        "number": 4,
        "title": "基于面向对象轮播图插件",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-19T03:57:24Z",
        "updated_at": "2018-06-06T09:13:47Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "> 最近一直在研究面向对象的编程,在学习期间写了一个简单的基于jquery的轮播插件slide.js\r\n<pre style='width:200px;margin:0 auto;font-size:14px;background:#fff;border:0;color:#555;font-family: Monaco,Menlo,Consolas,\"Courier New\",FontAwesome,monospace;text-rendering: optimizeLegibility;-webkit-font-smoothing: antialiased;'>\r\n          .----.\r\n       _.'__    `.\r\n   .--($)($$)---/#\\\r\n .' @          /###\\\r\n :         ,   #####\r\n  `-..__.-' _.-\\###/\r\n        `;_:    `\"'\r\n      .'\"\"\"\"\"`.\r\n     /,  ya ,\\\\\r\n    //  haha!  \\\\\r\n    `-._______.-'\r\n    ___`. | .'___\r\n   (______|______)\r\n</pre>     \r\n\r\n## slide\r\n\r\n> 作者：李成龙\r\n> 类型：js模块\r\n> 依赖模块：无\r\n> 依赖插件：jquery\r\n\r\n使用方法\r\n\r\n```js\r\n/**\r\n* 以默认配置启动分类模块\r\n**/\r\nrunImg.run()\r\n\r\n/**\r\n* 配置并启动分类模块\r\n**/\r\nrunImg.setting = {\r\n    el:'#banner-box',\r\n    imgBox: '.img-box',\r\n    times: 5000,\r\n    slidebtn:'#banner-right-textButton',\r\n    active:'active'\r\n};\r\nrunImg.run();\r\n```\r\n\r\n## version\r\n\r\n| 版本 | 备注 | 贡献者 | \r\n| :--: | :--: | :--: | \r\n| 1.0.0 | 轮播图插件 | 李成龙 |\r\n\r\n## API\r\n\r\n| 属性&方法 | 类型 | 简介 | \r\n| :--: | :--: | :--: | \r\n| [el](#api-el) | 属性 | 最外层容器 |\r\n| [imgBox](#api-imgBox) | 属性 | 图片容器 |\r\n| [times](#api-times) | 属性 | 默认轮播时间2s |\r\n| [slidebtn](#api-slidebtn) | 属性 | 图文点击按钮 |\r\n| [active](#api-active) | 方法 | 图文按钮选中状态 |\r\n| [prevBtn](#api-prevBtn) | 方法 | 上一张 |\r\n| [nextBtn](#api-nextBtn) | 方法 | 下一张 |\r\n| [play](#api-play) | 方法 | 轮播函数 |\r\n| [move](#api-move) | 方法 | 轮播方法 |\r\n| [index](#api-index) | 方法 | 当前图片序号 |\r\n| [next](#api-next) | 方法 | 下一张图片序号 |\r\n\r\n\r\n插件地址：[demo](https://github.com/lcl-101/slide)"
    },
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/3",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/3/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/3/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/3/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/3",
        "id": 324598395,
        "node_id": "MDU6SXNzdWUzMjQ1OTgzOTU=",
        "number": 3,
        "title": "ruby,rvm,jekyll的安装",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-19T03:56:46Z",
        "updated_at": "2018-05-19T03:56:46Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "> “It's my style. ”\r\n\r\n在搭建博客环境中遇到的种种坑,以及各种解决办法,由于本人用的是`mac`本,`windows`紧作为参考.\r\n\r\nrvm是什么？为什么要安装rvm呢，因为rvm可以让你拥有多个版本的Ruby，并且可以在多个版本之间自由切换。\r\n\r\n### 第一步：安装rvm\r\n\r\n```c\r\n$ curl -L get.rvm.io | bash -s stable\r\n$ source ~/.rvm/scripts/rvm\r\n```\r\n\r\n* 等待终端加载完毕,后输入：\r\n\r\n```c\r\nrvm -v\r\n```\r\n\r\n如果能显示版本好则安装成功了。\r\n\r\n### 第二步：安装ruby\r\n\r\n* 列出ruby可安装的版本信息\r\n\r\n```c\r\nrvm list known\r\n```\r\n\r\n* 安装一个ruby版本\r\n\r\n```c\r\nrvm install 2.1.4\r\n```\r\n\r\n如果想设置为默认版本，可以用这条命令来完成\r\n\r\n```c\r\nrvm use 2.1.4 --default \r\n```\r\n\r\n* 查看已安装的ruby\r\n\r\n```c\r\nrvm list\r\n```\r\n\r\n* 卸载一个已安装ruby版本\r\n\r\n```c\r\nrvm remove 2.1.4\r\n```\r\n\r\n### 第三步：更换源\r\n\r\n* 查看已有的源\r\n\r\n```c\r\ngem source\r\n```\r\n\r\n显示会如下：\r\n\r\n```c\r\nCURRENT SOURCES\r\nhttp://rubygems.org/\r\n```\r\n\r\n到这里我想说名一下,下面是重点,因为国内被墙,资源文件会下载不了,很多网站的解决办法是吧资源文件改成淘宝的\r\n\r\n例如:\r\n\r\n```c\r\n$ gem update --system\r\n$ gem uninstall rubygems-update\r\n$ gem sources -r http://rubygems.org/\r\n$ gem sources -a http://ruby.taobao.org\r\n```\r\n\r\n但这里本人建议还是使用原版的资源文件最好,所欲在danw之前最好,自己先翻墙了.到这里为止rvm和ruby已安装完成.\r\n\r\n一切就绪,下面就是安装`jekyll`\r\n\r\n### 最后一步：安装jekyll\r\n\r\n```c\r\n$ gem install jekyll\r\n$ jekyll new my-awesome-site\r\n$ cd my-awesome-site ~/my-awesome-site \r\n$ jekyll serve\r\n# => Now browse to http://localhost:4000\r\n```\r\n\r\n### 结束语\r\n\r\n到这里为止,所有操作已经完成,下面就可以开始自己写博客页面了."
    },
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/2",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/2/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/2/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/2/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/2",
        "id": 324598215,
        "node_id": "MDU6SXNzdWUzMjQ1OTgyMTU=",
        "number": 2,
        "title": "12个你未必知道的JavaScript技巧",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-19T03:52:16Z",
        "updated_at": "2018-05-19T03:52:16Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "> “It's my style. ”\r\n\r\n### 使用!!操作符转换布尔值\r\n\r\n有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回`true`值。为了做这样的验证，我们可以使用`!!`操作符来实现是非常的方便与简单。对于变量可以使用`!!variable`做检测，只要变量的值为:`0`、`null`、`\"\"`、`undefined`或者`NaN`都将返回的是`false`，反之返回的是`true`。比如下面的示例：\r\n\r\n\r\n```js\r\nfunction Account(cash) {\r\n    this.cash = cash;    \r\n    this.hasMoney = !!cash;\r\n}\r\nvar account = new Account(100.50);\r\nconsole.log(account.cash); // 100.50console.log(account.hasMoney); // truevar emptyAccount = new Account(0);\r\nconsole.log(emptyAccount.cash); // 0console.log(emptyAccount.hasMoney); // false\r\n```\r\n\r\n在这个示例中，只要`account.cash`的值大于`0`，那么`account.hasMoney`返回的值就是true。\r\n\r\n\r\n\r\n\r\n### 使用+将字符串转换成数字\r\n\r\n这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回`NaN`，比如下面的示例：\r\n\r\n\r\n```js\r\nfunction toNumber(strNumber) {\r\n    return +strNumber;\r\n}\r\nconsole.log(toNumber(\"1234\")); // 1234console.log(toNumber(\"ACB\")); // NaN\r\n```\r\n\r\n这个也适用于`Date`，在本例中，它将返回的是时间戳数字\r\n\r\n```js\r\nconsole.log(+new Date()) // 1461288164385\r\n```\r\n\r\n\r\n\r\n\r\n### 并条件符\r\n\r\n如果你有一段这样的代码：\r\n\r\n\r\n```js\r\nif (conected) {\r\n    login();\r\n}\r\n```\r\n\r\n\r\n你也可以将变量简写，并且使用`&&`和函数连接在一起，比如上面的示例，可以简写成这样：\r\n\r\n```js\r\nconected && login();\r\n```\r\n\r\n如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：\r\n\r\n```js\r\nuser && user.login();\r\n```\r\n\r\n\r\n### 使用||运算符\r\n\r\n在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用`||`操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为`false`，那么第二个值将会认为是一个默认值。如下面这个示例：\r\n\r\n\r\n```js\r\nfunction User(name, age) {\r\n    this.name = name || \"Oliver Queen\";    this.age = age || 27;\r\n}\r\nvar user1 = new User();\r\nconsole.log(user1.name); // Oliver Queenconsole.log(user1.age); // 27var user2 = new User(\"Barry Allen\", 25);\r\nconsole.log(user2.name); // Barry Allenconsole.log(user2.age); // 25\r\n```\r\n\r\n\r\n### 在循环中缓存`array.length`\r\n\r\n这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：\r\n\r\n\r\n```js\r\nfor(var i = 0; i < array.length; i++) {\r\n    console.log(array[i]);\r\n}\r\n```\r\n\r\n如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将`array.length`做一个缓存：\r\n\r\n\r\n```js\r\nvar length = array.length;for(var i = 0; i < length; i++) {\r\n    console.log(array[i]);\r\n}\r\n```\r\n\r\n你也可以写在这样：\r\n\r\n\r\n```js\r\nfor(var i = 0, length = array.length; i < length; i++) {\r\n    console.log(array[i]);\r\n}\r\n```\r\n\r\n\r\n\r\n### 检测对象中属性\r\n\r\n当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用`document.querySelector()`来选择一个`id`，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：\r\n\r\n\r\n```js\r\nif ('querySelector' in document) {\r\n    document.querySelector(\"#id\");\r\n} else {\r\n    document.getElementById(\"id\");\r\n}\r\n```\r\n\r\n\r\n在这个示例中，如果`document`不存在`querySelector`函数，那么就会调用`docuemnt.getElementById(\"id\")`。\r\n\r\n\r\n\r\n### 获取数组中最后一个元素\r\n\r\n`Array.prototype.slice(begin,end)`用来获取`begin`和`end`之间的数组元素。如果你不设置`end`参数，将会将数组的默认长度值当作`end`值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为`begin`的值，那么你可以获取数组的最后一个元素。如：\r\n\r\n\r\n```js\r\nvar array = [1,2,3,4,5,6];\r\nconsole.log(array.slice(-1)); // [6]console.log(array.slice(-2)); // [5,6]console.log(array.slice(-3)); // [4,5,6]\r\n```\r\n\r\n\r\n\r\n### 数组截断\r\n\r\n这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有`10`个元素，但你只想只要前五个元素，那么你可以通过`array.length=5`来截断数组。如下面这个示例：\r\n\r\n\r\n```js\r\nvar array = [1,2,3,4,5,6];\r\nconsole.log(array.length); // 6array.length = 3;\r\nconsole.log(array.length); // 3console.log(array); // [1,2,3]\r\n```\r\n\r\n\r\n\r\n### 替换所有\r\n\r\n`String.replace()`函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的`/g`来模拟`replaceAll()`函数功能：\r\n\r\n\r\n```js\r\nvar string = \"john john\";\r\nconsole.log(string.replace(/hn/, \"ana\")); // \"joana john\"console.log(string.replace(/hn/g, \"ana\")); // \"joana joana\"\r\n```\r\n\r\n\r\n### 合并数组\r\n\r\n如果你要合并两个数组，一般情况之下你都会使用`Array.concat()`函数：\r\n\r\n\r\n```js\r\nvar array1 = [1,2,3];var array2 = [4,5,6];\r\nconsole.log(array1.concat(array2)); // [1,2,3,4,5,6];\r\n```\r\n\r\n然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用`Array.pus().apply(arr1,arr2)`来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：\r\n\r\n\r\n```js\r\nvar array1 = [1,2,3];var array2 = [4,5,6];\r\nconsole.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];\r\n```\r\n\r\n\r\n\r\n### 将`NodeList`转换成数组\r\n\r\n如果你运行`document.querySelectorAll(“p”)`函数时，它可能返回`DOM`元素的数组，也就是`NodeList`对象。但这个对象不具有数组的函数功能，比如`sort()`、`reduce()`、`map()`、`filter()`等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用`[].slice.call(elements)`来实现：\r\n\r\n\r\n```js\r\nvar elements = document.querySelectorAll(\"p\"); // NodeListvar arrayElements = [].slice.call(elements); // Now the NodeList is an arrayvar arrayElements = Array.from(elements); // This is another way of converting NodeList to Array\r\n```\r\n\r\n\r\n### 数组元素的洗牌\r\n\r\n对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：\r\n\r\n\r\n```js\r\nvar list = [1,2,3];\r\nconsole.log(list.sort(function() { Math.random() - 0.5 })); // [2,1,3]\r\n```\r\n\r\n\r\n### 总结\r\n\r\n\r\n现在你学会了些有用的JavaScript小技巧。希望这些小技巧能在工作中帮助你解决一些麻烦，或者说这篇文章对你有所帮助。如果你有一些优秀的JavaScript小技巧，欢迎在评论中与我们一起分享。\r\n\r\n[原文链接](http://www.w3cplus.com/javascript/12-extremely-useful-hacks-for-javascript.html)"
    },
    {
        "url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/1",
        "repository_url": "https://api.github.com/repos/lcl-101/webpack-blog",
        "labels_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/1/labels{/name}",
        "comments_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/1/comments",
        "events_url": "https://api.github.com/repos/lcl-101/webpack-blog/issues/1/events",
        "html_url": "https://github.com/lcl-101/webpack-blog/issues/1",
        "id": 323451576,
        "node_id": "MDU6SXNzdWUzMjM0NTE1NzY=",
        "number": 1,
        "title": "note(放一些有用的小技巧)",
        "user": {
            "login": "lcl-101",
            "id": 13747322,
            "node_id": "MDQ6VXNlcjEzNzQ3MzIy",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13747322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lcl-101",
            "html_url": "https://github.com/lcl-101",
            "followers_url": "https://api.github.com/users/lcl-101/followers",
            "following_url": "https://api.github.com/users/lcl-101/following{/other_user}",
            "gists_url": "https://api.github.com/users/lcl-101/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lcl-101/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lcl-101/subscriptions",
            "organizations_url": "https://api.github.com/users/lcl-101/orgs",
            "repos_url": "https://api.github.com/users/lcl-101/repos",
            "events_url": "https://api.github.com/users/lcl-101/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lcl-101/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-16T02:56:00Z",
        "updated_at": "2018-05-24T09:58:27Z",
        "closed_at": null,
        "author_association": "OWNER",
        "body": "这里会放一些平时经常用的一些js,html,css等的方法,和动画.\r\n\r\n## js部分\r\n\r\n\r\n### 保存两位小数\r\n\r\n\r\n```js\r\nfunction changeTwoDecimal(x)\r\n{\r\n    var f_x = parseFloat(x);\r\n    if (isNaN(f_x))\r\n    {\r\n        return false;\r\n    }\r\n    f_x = Math.round(f_x *100)/100;\r\n    return f_x;\r\n}\r\n```\r\n\r\n\r\n### placeholder兼容到ie8\r\n\r\n\r\n```js\r\nif( !('placeholder' in document.createElement('input')) ){\r\n    $('input[placeholder],textarea[placeholder]').each(function(){\r\n        var that = $(this),\r\n        text= that.attr('placeholder');\r\n        if(that.val()===\"\"){\r\n            that.val(text).addClass('placeholder');\r\n        }\r\n        that.focus(function(){\r\n            if(that.val()===text){\r\n                that.val(\"\").removeClass('placeholder');\r\n            }\r\n        })\r\n        .blur(function(){\r\n            if(that.val()===\"\"){\r\n                that.val(text).addClass('placeholder');\r\n            }\r\n        })\r\n        .closest('form').submit(function(){\r\n            if(that.val() === text){\r\n                that.val('');\r\n            }\r\n        });\r\n    });\r\n} \r\n```\r\n\r\n### 自由落体\r\n\r\n```js\r\nfunction bounce(t){\r\n            var ts=t * t * 8.0;\r\n            return ts;\r\n        }\r\n        function getInterpolation(t){\r\n            var t = t*1.1226;\r\n            if(t<0.3535){\r\n                return bounce(t);\r\n            }else if(t < 0.7408){\r\n                return bounce(t - 0.54719) + 0.7;\r\n            }else if(t < 0.9644){\r\n                return bounce(t - 0.8526) + 0.9;\r\n            }else {\r\n                return bounce(t - 1.0435) + 0.95;\r\n            }\r\n        }\r\n        var tt=0;\r\n        setInterval(function(){\r\n            tt++;\r\n            if(tt>=1000){\r\n                return;\r\n            }\r\n            var s=-50*getInterpolation(tt / 1000)+50;\r\n            $('.qing-transform').show().css({transform: 'rotate('+-s+'deg)','-webkit-transform': 'rotate('+-s+'deg)','-moz-transform': 'rotate('+-s+'deg)','-o-transform': 'rotate('+-s+'deg)'})\r\n        },1)\r\n```\r\n\r\n\r\n## css部分\r\n\r\n### 单词换行\r\n\r\n\r\n```css\r\nword-break:break-all;\r\nword-wrap:break-word;\r\n```\r\n\r\n\r\n### 垂直剧中\r\n\r\n父元素中:\r\n    \r\n```css\r\ndisplay:-moz-box;\r\ndisplay:-webkit-box;\r\ndisplay:box;\r\n-moz-box-orient:vertical;\r\n-webkit-box-orient:vertical;\r\nbox-orient:vertical;\r\n\r\ndisplay: -webkit-flex;\r\ndisplay: flex;\r\n\r\nflex-direction: column;\r\n-moz-flex-direction: column;\r\n-webkit-flex-direction: column;\r\n-ms-flex-direction: column;\r\n-o-flex-direction: column;\r\n```\r\n\r\n子元素中:\r\n    \r\n```css\r\n-webkit-flex: 10;\r\n-moz-flex: 10;\r\n-ms-flex: 10;\r\n-o-flex: 10;\r\nflex: 10;\r\n    \r\n-webkit-box-flex:10;\r\n-moz-box-flex:10;\r\nbox-flex:10;\r\n/* Center slide text vertically */\r\ndisplay: -webkit-box;\r\ndisplay: -ms-flexbox;\r\ndisplay: -webkit-flex;\r\ndisplay: flex;\r\n/*-webkit-box-pack: center;*/\r\n/*-ms-flex-pack: center;*/\r\n/*-webkit-justify-content: center;*/\r\n/*justify-content: center;*/\r\n-webkit-box-align: center;\r\n-ms-flex-align: center;\r\n-webkit-align-items: center;\r\nalign-items: center;   \r\n```"
    }
];

module.exports = {
  listData:data
};
